#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include <sys/queue.h>

#include "attrs.h"
#include "options.h"

struct editor_event {
  uint8_t type;
  uint16_t key;
  uint32_t ch;

  TAILQ_ENTRY(editor_event) pointers;
};

// The "editor" holds the main state of the program.
struct editor {
  // The loaded buffers.
  TAILQ_HEAD(buffer_list, buffer) buffers;

  // The focused window.
  struct window *window;

  // A stack of editing modes.
  struct editing_mode* mode;

  // What's written to the status bar.
  struct buf* status;
  // Whether the status is an error.
  bool status_error;
  // Whether the status should be displayed.
  bool status_silence;
  // The position of the cursor in cmdline mode.
  size_t status_cursor;

  // An array of registers (a-z, /, ", * and +).
  #define EDITOR_NUM_REGISTERS 30
  struct editor_register {
    char name;
    struct buf *buf;
    // Read from the register. Caller must free the returned buffer.
    char *(*read)(struct editor_register *reg);
    // Write to the register. Makes a copy of the input buffer.
    void (*write)(struct editor_register *reg, char*);
  } registers[EDITOR_NUM_REGISTERS];

  // List of loaded ctags.
  struct tags *tags;

  // The width and height of the screen.
  size_t width;
  size_t height;

  bool highlight_search_matches;

  // Temporary input state.
  // TODO(isbadawi): This feels like a kludge but I don't know...
  unsigned int count;
  char register_;

  // Synthetic input events generated by editor_send_keys.
  // These take precedence over real events emitted by termbox.
  TAILQ_HEAD(event_list, editor_event) synthetic_events;

  struct {
#define OPTION(name, type, _) type name;
    BUFFER_OPTIONS
    EDITOR_OPTIONS
#undef OPTION
  } opt;
};

void editor_init(struct editor *editor, size_t width, size_t height);

void editor_open(struct editor *editor, char *path);

void editor_push_mode(struct editor *editor, struct editing_mode *mode);
void editor_pop_mode(struct editor *editor);

void editor_save_buffer(struct editor *editor, char *path);
void editor_execute_command(struct editor *editor, char *command);
void editor_draw(struct editor *editor);

struct editor_register *editor_get_register(struct editor *editor, char name);

struct tb_event;
bool editor_waitkey(struct editor *editor, struct tb_event *ev);
char editor_getchar(struct editor *editor);
void editor_handle_key_press(struct editor *editor, struct tb_event *ev);

ATTR_PRINTFLIKE(2, 3)
void editor_status_msg(struct editor *editor, const char *format, ...);
ATTR_PRINTFLIKE(2, 3)
void editor_status_err(struct editor *editor, const char *format, ...);

void editor_send_keys(struct editor *editor, const char *keys);

void editor_undo(struct editor *editor);
void editor_redo(struct editor *editor);

void editor_source(struct editor *editor, char *path);
