!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BOOL_OPTION	options.c	/^#define BOOL_OPTION(/;"	d	file:
BUFFER_NAME_MAXLEN	buffer.h	/^#define BUFFER_NAME_MAXLEN /;"	d
CMDLINE_MODE_INIT	mode.c	/^#define CMDLINE_MODE_INIT /;"	d	file:
DEBUG_FP	util.c	/^static FILE *DEBUG_FP;$/;"	v	file:
EDIT_ACTION_DELETE	undo.h	/^  enum { EDIT_ACTION_INSERT, EDIT_ACTION_DELETE } type;$/;"	e	enum:edit_action_t::__anon3
EDIT_ACTION_INSERT	undo.h	/^  enum { EDIT_ACTION_INSERT, EDIT_ACTION_DELETE } type;$/;"	e	enum:edit_action_t::__anon3
EXCLUSIVE	motion.c	/^#define EXCLUSIVE /;"	d	file:
GAPSIZE	gap.c	/^#define GAPSIZE /;"	d	file:
INCLUSIVE	motion.c	/^#define INCLUSIVE /;"	d	file:
INT_OPTION	options.c	/^#define INT_OPTION(/;"	d	file:
LINEWISE	motion.c	/^#define LINEWISE /;"	d	file:
LIST_FOREACH	list.h	/^#define LIST_FOREACH(/;"	d
LIST_FOREACH_REVERSE	list.h	/^#define LIST_FOREACH_REVERSE(/;"	d
OPTION	options.c	/^#define OPTION(/;"	d	file:
OPTION_TYPE_BOOL	options.c	/^    OPTION_TYPE_BOOL,$/;"	e	enum:option_t::option_type_t	file:
OPTION_TYPE_INT	options.c	/^    OPTION_TYPE_INT,$/;"	e	enum:option_t::option_type_t	file:
R	editor.c	/^#define R(/;"	d	file:
R	editor.c	/^#undef R$/;"	d	file:
SEARCH_BACKWARDS	search.h	/^  SEARCH_BACKWARDS$/;"	e	enum:search_direction_t
SEARCH_FORWARDS	search.h	/^  SEARCH_FORWARDS,$/;"	e	enum:search_direction_t
action	editor.c	/^  void (*action)(struct editor_t*, char*);$/;"	m	struct:editor_command_t	file:
arg	motion.c	/^  char arg;$/;"	m	struct:till_motion_t	file:
b	options.c	/^    bool b;$/;"	m	union:option_t::__anon2	file:
backward_search_char_cb	mode.c	/^static void backward_search_char_cb(struct editor_t *editor, char *command) {$/;"	f	file:
backward_search_done_cb	mode.c	/^static void backward_search_done_cb(struct editor_t *editor, char *command) {$/;"	f	file:
backward_search_impl	mode.c	/^static struct cmdline_mode_t backward_search_impl = {$/;"	v	typeref:struct:cmdline_mode_t	file:
buf	buf.h	/^  char *buf;$/;"	m	struct:buf_t
buf	buf.h	/^  unsigned int *buf;$/;"	m	struct:intbuf_t
buf	editor.h	/^  struct buf_t *buf;$/;"	m	struct:editor_register_t	typeref:struct:editor_register_t::buf_t
buf	undo.h	/^  struct buf_t *buf;$/;"	m	struct:edit_action_t	typeref:struct:edit_action_t::buf_t
buf_append	buf.c	/^void buf_append(struct buf_t *buf, char *s) {$/;"	f
buf_clear	buf.c	/^void buf_clear(struct buf_t *buf) {$/;"	f
buf_copy	buf.c	/^struct buf_t *buf_copy(struct buf_t *buf) {$/;"	f
buf_create	buf.c	/^struct buf_t *buf_create(size_t cap) {$/;"	f
buf_delete	buf.c	/^void buf_delete(struct buf_t *buf, size_t pos, size_t len) {$/;"	f
buf_free	buf.c	/^void buf_free(struct buf_t *buf) {$/;"	f
buf_from_char	buf.c	/^struct buf_t *buf_from_char(char c) {$/;"	f
buf_from_cstr	buf.c	/^struct buf_t *buf_from_cstr(char *s) {$/;"	f
buf_grow	buf.c	/^void buf_grow(struct buf_t *buf, size_t cap) {$/;"	f
buf_insert	buf.c	/^void buf_insert(struct buf_t *buf, char *s, size_t pos) {$/;"	f
buf_printf	buf.c	/^void buf_printf(struct buf_t *buf, const char *format, ...) {$/;"	f
buf_t	buf.h	/^struct buf_t {$/;"	s
buf_vprintf	buf.c	/^void buf_vprintf(struct buf_t *buf, const char *format, va_list args) {$/;"	f
bufend	gap.h	/^  char *bufend;$/;"	m	struct:gapbuf_t
buffer	tags.h	/^  struct buffer_t *buffer;$/;"	m	struct:tag_jump_t	typeref:struct:tag_jump_t::buffer_t
buffer	window.h	/^  struct buffer_t *buffer;$/;"	m	struct:window_t	typeref:struct:window_t::buffer_t
buffer_create	buffer.c	/^struct buffer_t *buffer_create(char *path) {$/;"	f
buffer_of	buffer.c	/^static struct buffer_t *buffer_of(char *path, struct gapbuf_t *gb) {$/;"	f	file:
buffer_open	buffer.c	/^struct buffer_t *buffer_open(char *path) {$/;"	f
buffer_saveas	buffer.c	/^int buffer_saveas(struct buffer_t *buffer, char *path) {$/;"	f
buffer_t	buffer.h	/^struct buffer_t {$/;"	s
buffer_top	motion.c	/^static size_t buffer_top(struct motion_context_t __unused ctx) {$/;"	f	file:
buffer_write	buffer.c	/^int buffer_write(struct buffer_t *buffer) {$/;"	f
buffers	editor.h	/^  struct list_t *buffers;$/;"	m	struct:editor_t	typeref:struct:editor_t::list_t
bufstart	gap.h	/^  char *bufstart;$/;"	m	struct:gapbuf_t
cap	buf.h	/^  size_t cap;$/;"	m	struct:buf_t
cap	buf.h	/^  size_t cap;$/;"	m	struct:intbuf_t
change_op	operator_pending_mode.c	/^static void change_op(struct editor_t *editor, struct region_t region) {$/;"	f	file:
char_cb	mode.c	/^  void (*char_cb)(struct editor_t*, char*);$/;"	m	struct:cmdline_mode_t	file:
cmd	tags.h	/^  char *cmd;$/;"	m	struct:tag_t
cmdline_mode_entered	mode.c	/^static void cmdline_mode_entered(struct editor_t *editor) {$/;"	f	file:
cmdline_mode_exited	mode.c	/^static void cmdline_mode_exited(struct editor_t *editor) {$/;"	f	file:
cmdline_mode_key_pressed	mode.c	/^static void cmdline_mode_key_pressed(struct editor_t *editor, struct tb_event *ev) {$/;"	f	file:
cmdline_mode_t	mode.c	/^struct cmdline_mode_t {$/;"	s	file:
command_impl	mode.c	/^static struct cmdline_mode_t command_impl = {$/;"	v	typeref:struct:cmdline_mode_t	file:
command_mode	mode.c	/^struct editing_mode_t *command_mode(void) {$/;"	f
count	editor.h	/^  unsigned int count;$/;"	m	struct:editor_t
cursor	mode.c	/^  size_t cursor;$/;"	m	struct:cmdline_mode_t	file:
cursor	tags.h	/^  size_t cursor;$/;"	m	struct:tag_jump_t
cursor	window.h	/^  size_t cursor;$/;"	m	struct:window_t
data	list.h	/^  void *data;$/;"	m	struct:list_node_t
debug	util.c	/^void debug(const char *format, ...) {$/;"	f
debug_fp	util.c	/^FILE *debug_fp(void) {$/;"	f
debug_init	util.c	/^void debug_init(void) {$/;"	f
delete_op	operator_pending_mode.c	/^static void delete_op(struct editor_t *editor, struct region_t region) {$/;"	f	file:
digit_mode	mode.c	/^struct editing_mode_t *digit_mode(void) {$/;"	f
digit_mode_impl	mode.c	/^static struct editing_mode_t digit_mode_impl = {$/;"	v	typeref:struct:editing_mode_t	file:
digit_pressed	mode.c	/^static void digit_pressed(struct editor_t *editor, struct tb_event *ev) {$/;"	f	file:
dirty	buffer.h	/^  bool dirty;$/;"	m	struct:buffer_t
done_cb	mode.c	/^  void (*done_cb)(struct editor_t*, char*);$/;"	m	struct:cmdline_mode_t	file:
down	motion.c	/^static size_t down(struct motion_context_t ctx) {$/;"	f	file:
edit_action_t	undo.h	/^struct edit_action_t {$/;"	s
editing_mode_t	mode.h	/^struct editing_mode_t {$/;"	s
editor_add_action	undo.c	/^void editor_add_action(struct editor_t *editor, struct edit_action_t action) {$/;"	f
editor_command_close_window	editor.c	/^static void editor_command_close_window(struct editor_t *editor, char *arg) {$/;"	f	file:
editor_command_edit	editor.c	/^static void editor_command_edit(struct editor_t *editor, char *arg) {$/;"	f	file:
editor_command_force_close_window	editor.c	/^static void editor_command_force_close_window(struct editor_t *editor, char *arg) {$/;"	f	file:
editor_command_force_quit	editor.c	/^static void editor_command_force_quit(struct editor_t __unused *editor,$/;"	f	file:
editor_command_quit	editor.c	/^static void editor_command_quit(struct editor_t *editor, char __unused *arg) {$/;"	f	file:
editor_command_set	editor.c	/^static void editor_command_set(struct editor_t *editor, char *arg) {$/;"	f	file:
editor_command_source	editor.c	/^static void editor_command_source(struct editor_t *editor, char *arg) {$/;"	f	file:
editor_command_t	editor.c	/^struct editor_command_t {$/;"	s	file:
editor_command_tag	editor.c	/^static void editor_command_tag(struct editor_t *editor, char *arg) {$/;"	f	file:
editor_command_vsplit	editor.c	/^static void editor_command_vsplit(struct editor_t *editor, char *arg) {$/;"	f	file:
editor_command_write_quit	editor.c	/^static void editor_command_write_quit(struct editor_t *editor, char *arg) {$/;"	f	file:
editor_commands	editor.c	/^static struct editor_command_t editor_commands[] = {$/;"	v	typeref:struct:editor_command_t	file:
editor_draw	editor.c	/^void editor_draw(struct editor_t *editor) {$/;"	f
editor_equalize_windows	editor.c	/^void editor_equalize_windows(struct editor_t *editor) {$/;"	f
editor_execute_command	editor.c	/^void editor_execute_command(struct editor_t *editor, char *command) {$/;"	f
editor_get_buffer_by_name	editor.c	/^static struct buffer_t *editor_get_buffer_by_name(struct editor_t* editor, char *name) {$/;"	f	file:
editor_get_register	editor.c	/^struct buf_t *editor_get_register(struct editor_t *editor, char name) {$/;"	f
editor_handle_key_press	editor.c	/^void editor_handle_key_press(struct editor_t *editor, struct tb_event *ev) {$/;"	f
editor_init	editor.c	/^void editor_init(struct editor_t *editor) {$/;"	f
editor_jump_to_tag	tags.c	/^void editor_jump_to_tag(struct editor_t *editor, char *name) {$/;"	f
editor_left_window	editor.c	/^struct window_t *editor_left_window(struct editor_t *editor, struct window_t *window) {$/;"	f
editor_open	editor.c	/^void editor_open(struct editor_t *editor, char *path) {$/;"	f
editor_pop_mode	editor.c	/^void editor_pop_mode(struct editor_t *editor) {$/;"	f
editor_push_mode	editor.c	/^void editor_push_mode(struct editor_t *editor, struct editing_mode_t *mode) {$/;"	f
editor_redo	undo.c	/^void editor_redo(struct editor_t* editor) {$/;"	f
editor_register_t	editor.h	/^struct editor_register_t {$/;"	s
editor_right_window	editor.c	/^struct window_t *editor_right_window(struct editor_t *editor, struct window_t *window) {$/;"	f
editor_save_buffer	editor.c	/^void editor_save_buffer(struct editor_t *editor, char *path) {$/;"	f
editor_search	search.c	/^void editor_search(struct editor_t *editor, char *pattern,$/;"	f
editor_send_keys	editor.c	/^void editor_send_keys(struct editor_t *editor, char *keys) {$/;"	f
editor_source_badavimrc	editor.c	/^static void editor_source_badavimrc(struct editor_t *editor) {$/;"	f	file:
editor_start_action_group	undo.c	/^void editor_start_action_group(struct editor_t *editor) {$/;"	f
editor_status_err	editor.c	/^void editor_status_err(struct editor_t *editor, const char *format, ...) {$/;"	f
editor_status_msg	editor.c	/^void editor_status_msg(struct editor_t *editor, const char *format, ...) {$/;"	f
editor_t	editor.h	/^struct editor_t {$/;"	s
editor_tag_stack_next	tags.c	/^void editor_tag_stack_next(struct editor_t *editor) {$/;"	f
editor_tag_stack_prev	tags.c	/^void editor_tag_stack_prev(struct editor_t *editor) {$/;"	f
editor_undo	undo.c	/^void editor_undo(struct editor_t* editor) {$/;"	f
end	operator_pending_mode.c	/^  size_t end;$/;"	m	struct:region_t	file:
entered	mode.h	/^  void (*entered)(struct editor_t*);$/;"	m	struct:editing_mode_t
entered	operator_pending_mode.c	/^static void entered(struct editor_t *editor) {$/;"	f	file:
error	search.c	/^  char error[48];$/;"	m	struct:search_result_t	file:
escape_regex	tags.c	/^static char *escape_regex(char *regex) {$/;"	f	file:
exclusive	motion.h	/^  bool exclusive;$/;"	m	struct:motion_t
exited	mode.h	/^  void (*exited)(struct editor_t*);$/;"	m	struct:editing_mode_t
file	tags.h	/^  char *file;$/;"	m	struct:tags_t
first_non_blank	motion.c	/^static size_t first_non_blank(struct motion_context_t ctx) {$/;"	f	file:
forward_search_char_cb	mode.c	/^static void forward_search_char_cb(struct editor_t *editor, char *command) {$/;"	f	file:
forward_search_done_cb	mode.c	/^static void forward_search_done_cb(struct editor_t *editor, char *command) {$/;"	f	file:
forward_search_impl	mode.c	/^static struct cmdline_mode_t forward_search_impl = {$/;"	v	typeref:struct:cmdline_mode_t	file:
g_mode	motion.c	/^static struct editing_mode_t g_mode = {$/;"	v	typeref:struct:editing_mode_t	file:
g_motion_table	motion.c	/^static struct motion_t g_motion_table[] = {$/;"	v	typeref:struct:motion_t	file:
g_pressed	motion.c	/^static void g_pressed(struct editor_t *editor, struct tb_event *ev) {$/;"	f	file:
gapbuf_t	gap.h	/^struct gapbuf_t {$/;"	s
gapend	gap.h	/^  char *gapend;$/;"	m	struct:gapbuf_t
gapstart	gap.h	/^  char *gapstart;$/;"	m	struct:gapbuf_t
gb_create	gap.c	/^struct gapbuf_t *gb_create(void) {$/;"	f
gb_del	gap.c	/^void gb_del(struct gapbuf_t *gb, size_t n, size_t pos) {$/;"	f
gb_free	gap.c	/^void gb_free(struct gapbuf_t *gb) {$/;"	f
gb_getchar	gap.c	/^char gb_getchar(struct gapbuf_t *gb, size_t pos) {$/;"	f
gb_getstring	gap.c	/^void gb_getstring(struct gapbuf_t *gb, size_t pos, size_t n, char *buf) {$/;"	f
gb_growgap	gap.c	/^static void gb_growgap(struct gapbuf_t *gb, size_t n) {$/;"	f	file:
gb_index	gap.c	/^static size_t gb_index(struct gapbuf_t *gb, size_t pos) {$/;"	f	file:
gb_indexof	gap.c	/^size_t gb_indexof(struct gapbuf_t *gb, char c, size_t start) {$/;"	f
gb_lastindexof	gap.c	/^ssize_t gb_lastindexof(struct gapbuf_t *gb, char c, size_t start) {$/;"	f
gb_linecol_to_pos	gap.c	/^size_t gb_linecol_to_pos(struct gapbuf_t *gb, size_t line, size_t column) {$/;"	f
gb_load	gap.c	/^struct gapbuf_t *gb_load(FILE *fp) {$/;"	f
gb_mvgap	gap.c	/^void gb_mvgap(struct gapbuf_t *gb, size_t pos) {$/;"	f
gb_nlines	gap.c	/^size_t gb_nlines(struct gapbuf_t *gb) {$/;"	f
gb_pos_to_linecol	gap.c	/^void gb_pos_to_linecol(struct gapbuf_t *gb, size_t pos, size_t *line, size_t *column) {$/;"	f
gb_putchar	gap.c	/^void gb_putchar(struct gapbuf_t *gb, char c, size_t pos) {$/;"	f
gb_putstring	gap.c	/^void gb_putstring(struct gapbuf_t *gb, char *buf, size_t n, size_t pos) {$/;"	f
gb_save	gap.c	/^void gb_save(struct gapbuf_t *gb, FILE *fp) {$/;"	f
gb_search	search.c	/^static void gb_search(struct gapbuf_t *gb, char *pattern,$/;"	f	file:
gb_size	gap.c	/^size_t gb_size(struct gapbuf_t *gb) {$/;"	f
h	window.h	/^  size_t h;$/;"	m	struct:window_t
head	list.h	/^  struct list_node_t *head;$/;"	m	struct:list_t	typeref:struct:list_t::list_node_t
height	editor.h	/^  size_t height;$/;"	m	struct:editor_t
i	options.c	/^    int i;$/;"	m	union:option_t::__anon2	file:
impl	insert_mode.c	/^static struct editing_mode_t impl = {$/;"	v	typeref:struct:editing_mode_t	file:
impl	motion.c	/^static struct editing_mode_t impl = {$/;"	v	typeref:struct:editing_mode_t	file:
impl	normal_mode.c	/^static struct editing_mode_t impl = {$/;"	v	typeref:struct:editing_mode_t	file:
impl	operator_pending_mode.c	/^static struct operator_pending_mode_t impl = {$/;"	v	typeref:struct:operator_pending_mode_t	file:
insert_mode	insert_mode.c	/^struct editing_mode_t *insert_mode(void) {$/;"	f
insert_mode_entered	insert_mode.c	/^static void insert_mode_entered(struct editor_t *editor) {$/;"	f	file:
insert_mode_exited	insert_mode.c	/^static void insert_mode_exited(struct editor_t *editor) {$/;"	f	file:
insert_mode_key_pressed	insert_mode.c	/^static void insert_mode_key_pressed(struct editor_t* editor, struct tb_event* ev) {$/;"	f	file:
intbuf_add	buf.c	/^void intbuf_add(struct intbuf_t *buf, unsigned int i) {$/;"	f
intbuf_create	buf.c	/^struct intbuf_t *intbuf_create(size_t cap) {$/;"	f
intbuf_free	buf.c	/^void intbuf_free(struct intbuf_t *buf) {$/;"	f
intbuf_grow	buf.c	/^static void intbuf_grow(struct intbuf_t *buf, size_t cap) {$/;"	f	file:
intbuf_insert	buf.c	/^void intbuf_insert(struct intbuf_t *buf, unsigned int i, size_t pos) {$/;"	f
intbuf_remove	buf.c	/^void intbuf_remove(struct intbuf_t *buf, size_t pos) {$/;"	f
intbuf_t	buf.h	/^struct intbuf_t {$/;"	s
is_WORD_end	motion.c	/^static bool is_WORD_end(struct motion_context_t ctx) {$/;"	f	file:
is_WORD_start	motion.c	/^static bool is_WORD_start(struct motion_context_t ctx) {$/;"	f	file:
is_blank_line	motion.c	/^static bool is_blank_line(struct gapbuf_t *gb, size_t pos) {$/;"	f	file:
is_first_line	motion.c	/^static bool is_first_line(struct gapbuf_t *gb, size_t pos) {$/;"	f	file:
is_last_line	motion.c	/^static bool is_last_line(struct gapbuf_t *gb, size_t pos) {$/;"	f	file:
is_last_line	normal_mode.c	/^static bool is_last_line(struct gapbuf_t *gb, size_t pos) {$/;"	f	file:
is_line_end	motion.c	/^static bool is_line_end(struct gapbuf_t *gb, size_t pos) {$/;"	f	file:
is_line_start	motion.c	/^static bool is_line_start(struct gapbuf_t *gb, size_t pos) {$/;"	f	file:
is_paragraph_end	motion.c	/^static bool is_paragraph_end(struct motion_context_t ctx) {$/;"	f	file:
is_paragraph_start	motion.c	/^static bool is_paragraph_start(struct motion_context_t ctx) {$/;"	f	file:
is_word_char	motion.c	/^static bool is_word_char(char c) {$/;"	f	file:
is_word_end	motion.c	/^static bool is_word_end(struct motion_context_t ctx) {$/;"	f	file:
is_word_start	motion.c	/^static bool is_word_start(struct motion_context_t ctx) {$/;"	f	file:
iter	list.h	/^  struct list_node_t *iter;$/;"	m	struct:list_t	typeref:struct:list_t::list_node_t
key_pressed	mode.h	/^  void (*key_pressed)(struct editor_t*, struct tb_event*);$/;"	m	struct:editing_mode_t
key_pressed	motion.c	/^static void key_pressed(struct editor_t *editor, struct tb_event *ev) {$/;"	f	file:
key_pressed	operator_pending_mode.c	/^static void key_pressed(struct editor_t *editor, struct tb_event *ev) {$/;"	f	file:
last_non_blank	motion.c	/^static size_t last_non_blank(struct motion_context_t ctx) {$/;"	f	file:
left	motion.c	/^static size_t left(struct motion_context_t ctx) {$/;"	f	file:
left	window.h	/^  size_t left;$/;"	m	struct:window_t
len	buf.h	/^  size_t len;$/;"	m	struct:buf_t
len	buf.h	/^  size_t len;$/;"	m	struct:intbuf_t
len	search.c	/^  size_t len;$/;"	m	struct:match_t	file:
len	tags.h	/^  size_t len;$/;"	m	struct:tags_t
line_end	motion.c	/^static size_t line_end(struct motion_context_t ctx) {$/;"	f	file:
line_start	motion.c	/^static size_t line_start(struct motion_context_t ctx) {$/;"	f	file:
lines	gap.h	/^  struct intbuf_t *lines;$/;"	m	struct:gapbuf_t	typeref:struct:gapbuf_t::intbuf_t
linewise	motion.h	/^  bool linewise;$/;"	m	struct:motion_t
list_append	list.c	/^void list_append(struct list_t *list, void *data) {$/;"	f
list_clear	list.c	/^void list_clear(struct list_t *list) {$/;"	f
list_create	list.c	/^struct list_t *list_create(void) {$/;"	f
list_empty	list.c	/^bool list_empty(struct list_t *list) {$/;"	f
list_free	list.c	/^void list_free(struct list_t *list) {$/;"	f
list_get_node	list.c	/^static struct list_node_t *list_get_node(struct list_t *list, void *data) {$/;"	f	file:
list_insert_after	list.c	/^void list_insert_after(struct list_t *list, void *el, void *data) {$/;"	f
list_insert_after_node	list.c	/^static void list_insert_after_node(struct list_node_t *node, void *data) {$/;"	f	file:
list_insert_before	list.c	/^void list_insert_before(struct list_t *list, void *el, void *data) {$/;"	f
list_insert_before_node	list.c	/^static void list_insert_before_node(struct list_node_t *node, void *data) {$/;"	f	file:
list_next	list.c	/^void *list_next(struct list_t *list, void *data) {$/;"	f
list_node_create	list.c	/^static struct list_node_t *list_node_create(void *data,$/;"	f	file:
list_node_t	list.h	/^struct list_node_t {$/;"	s
list_peek	list.c	/^void *list_peek(struct list_t *list) {$/;"	f
list_pop	list.c	/^void *list_pop(struct list_t *list) {$/;"	f
list_prepend	list.c	/^void list_prepend(struct list_t *list, void *data) {$/;"	f
list_prev	list.c	/^void *list_prev(struct list_t *list, void *data) {$/;"	f
list_remove	list.c	/^void list_remove(struct list_t *list, void *data) {$/;"	f
list_remove_node	list.c	/^static void *list_remove_node(struct list_node_t *node) {$/;"	f	file:
list_size	list.c	/^size_t list_size(struct list_t *list) {$/;"	f
list_t	list.h	/^struct list_t {$/;"	s
loaded_at	tags.h	/^  time_t loaded_at;$/;"	m	struct:tags_t
main	main.c	/^int main(int argc, char *argv[]) {$/;"	f
match_t	search.c	/^struct match_t {$/;"	s	file:
matches	search.c	/^  struct list_t *matches;$/;"	m	struct:search_result_t	typeref:struct:search_result_t::list_t	file:
max	util.h	/^#define max(/;"	d
min	util.h	/^#define min(/;"	d
mode	editor.h	/^  struct editing_mode_t* mode;$/;"	m	struct:editor_t	typeref:struct:editor_t::editing_mode_t
mode	mode.c	/^  struct editing_mode_t mode;$/;"	m	struct:cmdline_mode_t	typeref:struct:cmdline_mode_t::editing_mode_t	file:
mode	motion.c	/^  struct editing_mode_t mode;$/;"	m	struct:till_mode_t	typeref:struct:till_mode_t::editing_mode_t	file:
mode	operator_pending_mode.c	/^  struct editing_mode_t mode;$/;"	m	struct:operator_pending_mode_t	typeref:struct:operator_pending_mode_t::editing_mode_t	file:
motion	editor.h	/^  struct motion_t *motion;$/;"	m	struct:editor_t	typeref:struct:editor_t::motion_t
motion	motion.c	/^  struct motion_t motion;$/;"	m	struct:till_motion_t	typeref:struct:till_motion_t::motion_t	file:
motion	motion.h	/^  struct motion_t *motion;$/;"	m	struct:motion_context_t	typeref:struct:motion_context_t::motion_t
motion_apply	motion.c	/^size_t motion_apply(struct editor_t *editor) {$/;"	f
motion_context_t	motion.h	/^struct motion_context_t {$/;"	s
motion_find	motion.c	/^static struct motion_t *motion_find(struct motion_t *table, char name) {$/;"	f	file:
motion_mode	motion.c	/^struct editing_mode_t *motion_mode(void) {$/;"	f
motion_t	motion.h	/^struct motion_t {$/;"	s
motion_table	motion.c	/^static struct motion_t motion_table[] = {$/;"	v	typeref:struct:motion_t	file:
motion_word_under_cursor	motion.c	/^size_t motion_word_under_cursor(struct window_t *window, char *buf) {$/;"	f
name	buffer.h	/^  char name[BUFFER_NAME_MAXLEN];$/;"	m	struct:buffer_t
name	editor.c	/^  const char *name;$/;"	m	struct:editor_command_t	file:
name	editor.h	/^  char name;$/;"	m	struct:editor_register_t
name	motion.h	/^  char name;$/;"	m	struct:motion_t
name	operator_pending_mode.c	/^static struct { char name; op_t *op; } op_table[] = {$/;"	m	struct:__anon1	file:
name	options.c	/^  const char *name;$/;"	m	struct:option_t	file:
name	tags.h	/^  char *name;$/;"	m	struct:tag_t
next	list.h	/^  struct list_node_t *next;$/;"	m	struct:list_node_t	typeref:struct:list_node_t::list_node_t
next_WORD_end	motion.c	/^static size_t next_WORD_end(struct motion_context_t ctx) {$/;"	f	file:
next_WORD_start	motion.c	/^static size_t next_WORD_start(struct motion_context_t ctx) {$/;"	f	file:
next_until	motion.c	/^static size_t next_until(struct motion_context_t ctx, bool (*pred)(struct motion_context_t)) {$/;"	f	file:
next_word_end	motion.c	/^static size_t next_word_end(struct motion_context_t ctx) {$/;"	f	file:
next_word_start	motion.c	/^static size_t next_word_start(struct motion_context_t ctx) {$/;"	f	file:
normal_mode	normal_mode.c	/^struct editing_mode_t *normal_mode(void) {$/;"	f
normal_mode_entered	normal_mode.c	/^static void normal_mode_entered(struct editor_t *editor) {$/;"	f	file:
normal_mode_key_pressed	normal_mode.c	/^static void normal_mode_key_pressed(struct editor_t* editor, struct tb_event* ev) {$/;"	f	file:
op	motion.h	/^  size_t (*op)(struct motion_context_t);$/;"	m	struct:motion_t
op	operator_pending_mode.c	/^  op_t* op;$/;"	m	struct:operator_pending_mode_t	file:
op	operator_pending_mode.c	/^static struct { char name; op_t *op; } op_table[] = {$/;"	m	struct:__anon1	file:
op_find	operator_pending_mode.c	/^static op_t *op_find(char name) {$/;"	f	file:
op_t	operator_pending_mode.c	/^typedef void (op_t) (struct editor_t *editor, struct region_t);$/;"	t	file:
op_table	operator_pending_mode.c	/^static struct { char name; op_t *op; } op_table[] = {$/;"	v	typeref:struct:__anon1	file:
operator_pending_mode	operator_pending_mode.c	/^struct editing_mode_t *operator_pending_mode(char op_name) {$/;"	f
operator_pending_mode_t	operator_pending_mode.c	/^struct operator_pending_mode_t {$/;"	s	file:
option_exists	options.c	/^bool option_exists(const char *name) {$/;"	f
option_find	options.c	/^static struct option_t *option_find(const char *name) {$/;"	f	file:
option_get_bool	options.c	/^bool option_get_bool(const char *name) {$/;"	f
option_get_int	options.c	/^int option_get_int(const char *name) {$/;"	f
option_has_type	options.c	/^static bool option_has_type(const char *name, enum option_type_t type) {$/;"	f	file:
option_is_bool	options.c	/^bool option_is_bool(const char *name) {$/;"	f
option_is_int	options.c	/^bool option_is_int(const char *name) {$/;"	f
option_set_bool	options.c	/^void option_set_bool(const char *name, bool value) {$/;"	f
option_set_int	options.c	/^void option_set_int(const char *name, int value) {$/;"	f
option_t	options.c	/^struct option_t {$/;"	s	file:
option_table	options.c	/^static struct option_t option_table[] = {$/;"	v	typeref:struct:option_t	file:
option_type_t	options.c	/^  enum option_type_t {$/;"	g	struct:option_t	file:
paragraph_end	motion.c	/^static size_t paragraph_end(struct motion_context_t ctx) {$/;"	f	file:
paragraph_start	motion.c	/^static size_t paragraph_start(struct motion_context_t ctx) {$/;"	f	file:
parent	mode.h	/^  struct editing_mode_t *parent;$/;"	m	struct:editing_mode_t	typeref:struct:editing_mode_t::editing_mode_t
path	tags.h	/^  char *path;$/;"	m	struct:tag_t
pos	motion.h	/^  size_t pos;$/;"	m	struct:motion_context_t
pos	undo.h	/^  size_t pos;$/;"	m	struct:edit_action_t
prev	list.h	/^  struct list_node_t *prev;$/;"	m	struct:list_node_t	typeref:struct:list_node_t::list_node_t
prev_WORD_end	motion.c	/^static size_t prev_WORD_end(struct motion_context_t ctx) {$/;"	f	file:
prev_WORD_start	motion.c	/^static size_t prev_WORD_start(struct motion_context_t ctx) {$/;"	f	file:
prev_until	motion.c	/^static size_t prev_until(struct motion_context_t ctx, bool (*pred)(struct motion_context_t)) {$/;"	f	file:
prev_word_end	motion.c	/^static size_t prev_word_end(struct motion_context_t ctx) {$/;"	f	file:
prev_word_start	motion.c	/^static size_t prev_word_start(struct motion_context_t ctx) {$/;"	f	file:
prompt	mode.c	/^  char prompt;$/;"	m	struct:cmdline_mode_t	file:
quote_mode	mode.c	/^struct editing_mode_t *quote_mode(void) {$/;"	f
quote_mode_impl	mode.c	/^static struct editing_mode_t quote_mode_impl = {$/;"	v	typeref:struct:editing_mode_t	file:
quote_pressed	mode.c	/^static void quote_pressed(struct editor_t *editor, struct tb_event *ev) {$/;"	f	file:
redo_stack	buffer.h	/^  struct list_t *redo_stack;$/;"	m	struct:buffer_t	typeref:struct:buffer_t::list_t
region_create	operator_pending_mode.c	/^static struct region_t region_create(size_t start, size_t end) {$/;"	f	file:
region_t	operator_pending_mode.c	/^struct region_t {$/;"	s	file:
register_	editor.h	/^  char register_;$/;"	m	struct:editor_t
register_table	editor.c	/^static struct editor_register_t register_table[] = {$/;"	v	typeref:struct:editor_register_t	file:
registers	editor.h	/^  struct editor_register_t *registers;$/;"	m	struct:editor_t	typeref:struct:editor_t::editor_register_t
right	motion.c	/^static size_t right(struct motion_context_t ctx) {$/;"	f	file:
search_char_cb	mode.c	/^static void search_char_cb(struct editor_t *editor, char *command,$/;"	f	file:
search_direction_t	search.h	/^enum search_direction_t {$/;"	g
search_done_cb	mode.c	/^static void search_done_cb(struct editor_t *editor, char *command,$/;"	f	file:
search_mode	mode.c	/^struct editing_mode_t *search_mode(char direction) {$/;"	f
search_result_t	search.c	/^struct search_result_t {$/;"	s	file:
search_should_ignore_case	search.c	/^static bool search_should_ignore_case(char *pattern) {$/;"	f	file:
shortname	editor.c	/^  const char *shortname;$/;"	m	struct:editor_command_t	file:
start	operator_pending_mode.c	/^  size_t start;$/;"	m	struct:region_t	file:
start	search.c	/^  size_t start;$/;"	m	struct:match_t	file:
status	editor.h	/^  struct buf_t* status;$/;"	m	struct:editor_t	typeref:struct:editor_t::buf_t
status_error	editor.h	/^  bool status_error;$/;"	m	struct:editor_t
status_silence	editor.h	/^  bool status_silence;$/;"	m	struct:editor_t
suspend	main.c	/^static void suspend(struct editor_t *editor) {$/;"	f	file:
tag	tags.h	/^  struct tag_t *tag;$/;"	m	struct:tag_jump_t	typeref:struct:tag_jump_t::tag_t
tag	window.h	/^  struct tag_jump_t *tag;$/;"	m	struct:window_t	typeref:struct:window_t::tag_jump_t
tag_compare	tags.c	/^static int tag_compare(const void *lhs, const void *rhs) {$/;"	f	file:
tag_jump_t	tags.h	/^struct tag_jump_t {$/;"	s
tag_stack	window.h	/^  struct list_t *tag_stack;$/;"	m	struct:window_t	typeref:struct:window_t::list_t
tag_t	tags.h	/^struct tag_t {$/;"	s
tags	editor.h	/^  struct tags_t *tags;$/;"	m	struct:editor_t	typeref:struct:editor_t::tags_t
tags	tags.h	/^  struct tag_t *tags;$/;"	m	struct:tags_t	typeref:struct:tags_t::tag_t
tags_clear	tags.c	/^static void tags_clear(struct tags_t *tags) {$/;"	f	file:
tags_create	tags.c	/^struct tags_t *tags_create(char *file) {$/;"	f
tags_find	tags.c	/^struct tag_t *tags_find(struct tags_t *tags, char *name) {$/;"	f
tags_load	tags.c	/^static void tags_load(struct tags_t *tags) {$/;"	f	file:
tags_t	tags.h	/^struct tags_t {$/;"	s
tail	list.h	/^  struct list_node_t *tail;$/;"	m	struct:list_t	typeref:struct:list_t::list_node_t
text	buffer.h	/^  struct gapbuf_t *text;$/;"	m	struct:buffer_t	typeref:struct:buffer_t::gapbuf_t
till_backward_exclusive	motion.c	/^static size_t till_backward_exclusive(struct motion_context_t ctx) {$/;"	f	file:
till_backward_inclusive	motion.c	/^static size_t till_backward_inclusive(struct motion_context_t ctx) {$/;"	f	file:
till_forward_exclusive	motion.c	/^static size_t till_forward_exclusive(struct motion_context_t ctx) {$/;"	f	file:
till_forward_inclusive	motion.c	/^static size_t till_forward_inclusive(struct motion_context_t ctx) {$/;"	f	file:
till_key_pressed	motion.c	/^static void till_key_pressed(struct editor_t *editor, struct tb_event *ev) {$/;"	f	file:
till_mode	motion.c	/^static struct editing_mode_t *till_mode(char which) {$/;"	f	file:
till_mode_impl	motion.c	/^static struct till_mode_t till_mode_impl = {$/;"	v	typeref:struct:till_mode_t	file:
till_mode_t	motion.c	/^struct till_mode_t {$/;"	s	file:
till_motion_impl	motion.c	/^static struct till_motion_t till_motion_impl = {{-1, NULL, INCLUSIVE}, -1};$/;"	v	typeref:struct:till_motion_t	file:
till_motion_t	motion.c	/^struct till_motion_t {$/;"	s	file:
top	window.h	/^  size_t top;$/;"	m	struct:window_t
type	options.c	/^  } type;$/;"	m	struct:option_t	typeref:enum:option_t::option_type_t	file:
type	undo.h	/^  enum { EDIT_ACTION_INSERT, EDIT_ACTION_DELETE } type;$/;"	m	struct:edit_action_t	typeref:enum:edit_action_t::__anon3
undo_stack	buffer.h	/^  struct list_t *undo_stack;$/;"	m	struct:buffer_t	typeref:struct:buffer_t::list_t
up	motion.c	/^static size_t up(struct motion_context_t ctx) {$/;"	f	file:
value	options.c	/^  } value;$/;"	m	struct:option_t	typeref:union:option_t::__anon2	file:
w	window.h	/^  size_t w;$/;"	m	struct:window_t
which	motion.c	/^  char which; \/\/ t or T or f or F$/;"	m	struct:till_mode_t	file:
width	editor.h	/^  size_t width;$/;"	m	struct:editor_t
window	editor.h	/^  struct window_t *window;$/;"	m	struct:editor_t	typeref:struct:editor_t::window_t
window	motion.h	/^  struct window_t *window;$/;"	m	struct:motion_context_t	typeref:struct:motion_context_t::window_t
window_change_cell	window.c	/^static void window_change_cell(struct window_t *window, size_t x, size_t y, char c,$/;"	f	file:
window_create	window.c	/^struct window_t *window_create(struct buffer_t *buffer, size_t x, size_t y, size_t w, size_t h) {$/;"	f
window_draw	window.c	/^void window_draw(struct window_t *window) {$/;"	f
window_draw_cursor	window.c	/^void window_draw_cursor(struct window_t *window) {$/;"	f
window_ensure_cursor_visible	window.c	/^static void window_ensure_cursor_visible(struct window_t *window) {$/;"	f	file:
window_numberwidth	window.c	/^static size_t window_numberwidth(struct window_t* window) {$/;"	f	file:
window_t	window.h	/^struct window_t {$/;"	s
windows	editor.h	/^  struct list_t *windows;$/;"	m	struct:editor_t	typeref:struct:editor_t::list_t
x	window.h	/^  size_t x;$/;"	m	struct:window_t
xmalloc	util.c	/^void *xmalloc(size_t size) {$/;"	f
xrealloc	util.c	/^void *xrealloc(void *ptr, size_t size) {$/;"	f
xstrdup	util.c	/^char *xstrdup(const char *s) {$/;"	f
y	window.h	/^  size_t y;$/;"	m	struct:window_t
yank_op	operator_pending_mode.c	/^static void yank_op(struct editor_t *editor, struct region_t region) {$/;"	f	file:
